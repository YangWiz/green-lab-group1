# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bfs_swig
else:
    import _bfs_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bfs_swig.delete_SwigPyIterator

    def value(self):
        return _bfs_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _bfs_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _bfs_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _bfs_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _bfs_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _bfs_swig.SwigPyIterator_copy(self)

    def next(self):
        return _bfs_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _bfs_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _bfs_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _bfs_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _bfs_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _bfs_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _bfs_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _bfs_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _bfs_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _bfs_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _bfs_swig:
_bfs_swig.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _bfs_swig.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bfs_swig.IntVector___nonzero__(self)

    def __bool__(self):
        return _bfs_swig.IntVector___bool__(self)

    def __len__(self):
        return _bfs_swig.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _bfs_swig.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bfs_swig.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bfs_swig.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bfs_swig.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bfs_swig.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bfs_swig.IntVector___setitem__(self, *args)

    def pop(self):
        return _bfs_swig.IntVector_pop(self)

    def append(self, x):
        return _bfs_swig.IntVector_append(self, x)

    def empty(self):
        return _bfs_swig.IntVector_empty(self)

    def size(self):
        return _bfs_swig.IntVector_size(self)

    def swap(self, v):
        return _bfs_swig.IntVector_swap(self, v)

    def begin(self):
        return _bfs_swig.IntVector_begin(self)

    def end(self):
        return _bfs_swig.IntVector_end(self)

    def rbegin(self):
        return _bfs_swig.IntVector_rbegin(self)

    def rend(self):
        return _bfs_swig.IntVector_rend(self)

    def clear(self):
        return _bfs_swig.IntVector_clear(self)

    def get_allocator(self):
        return _bfs_swig.IntVector_get_allocator(self)

    def pop_back(self):
        return _bfs_swig.IntVector_pop_back(self)

    def erase(self, *args):
        return _bfs_swig.IntVector_erase(self, *args)

    def __init__(self, *args):
        _bfs_swig.IntVector_swiginit(self, _bfs_swig.new_IntVector(*args))

    def push_back(self, x):
        return _bfs_swig.IntVector_push_back(self, x)

    def front(self):
        return _bfs_swig.IntVector_front(self)

    def back(self):
        return _bfs_swig.IntVector_back(self)

    def assign(self, n, x):
        return _bfs_swig.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _bfs_swig.IntVector_resize(self, *args)

    def insert(self, *args):
        return _bfs_swig.IntVector_insert(self, *args)

    def reserve(self, n):
        return _bfs_swig.IntVector_reserve(self, n)

    def capacity(self):
        return _bfs_swig.IntVector_capacity(self)
    __swig_destroy__ = _bfs_swig.delete_IntVector

# Register IntVector in _bfs_swig:
_bfs_swig.IntVector_swigregister(IntVector)

class IntMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _bfs_swig.IntMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bfs_swig.IntMap___nonzero__(self)

    def __bool__(self):
        return _bfs_swig.IntMap___bool__(self)

    def __len__(self):
        return _bfs_swig.IntMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _bfs_swig.IntMap___getitem__(self, key)

    def __delitem__(self, key):
        return _bfs_swig.IntMap___delitem__(self, key)

    def has_key(self, key):
        return _bfs_swig.IntMap_has_key(self, key)

    def keys(self):
        return _bfs_swig.IntMap_keys(self)

    def values(self):
        return _bfs_swig.IntMap_values(self)

    def items(self):
        return _bfs_swig.IntMap_items(self)

    def __contains__(self, key):
        return _bfs_swig.IntMap___contains__(self, key)

    def key_iterator(self):
        return _bfs_swig.IntMap_key_iterator(self)

    def value_iterator(self):
        return _bfs_swig.IntMap_value_iterator(self)

    def __setitem__(self, *args):
        return _bfs_swig.IntMap___setitem__(self, *args)

    def asdict(self):
        return _bfs_swig.IntMap_asdict(self)

    def __init__(self, *args):
        _bfs_swig.IntMap_swiginit(self, _bfs_swig.new_IntMap(*args))

    def empty(self):
        return _bfs_swig.IntMap_empty(self)

    def size(self):
        return _bfs_swig.IntMap_size(self)

    def swap(self, v):
        return _bfs_swig.IntMap_swap(self, v)

    def begin(self):
        return _bfs_swig.IntMap_begin(self)

    def end(self):
        return _bfs_swig.IntMap_end(self)

    def rbegin(self):
        return _bfs_swig.IntMap_rbegin(self)

    def rend(self):
        return _bfs_swig.IntMap_rend(self)

    def clear(self):
        return _bfs_swig.IntMap_clear(self)

    def get_allocator(self):
        return _bfs_swig.IntMap_get_allocator(self)

    def count(self, x):
        return _bfs_swig.IntMap_count(self, x)

    def erase(self, *args):
        return _bfs_swig.IntMap_erase(self, *args)

    def find(self, x):
        return _bfs_swig.IntMap_find(self, x)

    def lower_bound(self, x):
        return _bfs_swig.IntMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _bfs_swig.IntMap_upper_bound(self, x)
    __swig_destroy__ = _bfs_swig.delete_IntMap

# Register IntMap in _bfs_swig:
_bfs_swig.IntMap_swigregister(IntMap)

class Graph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _bfs_swig.Graph_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bfs_swig.Graph___nonzero__(self)

    def __bool__(self):
        return _bfs_swig.Graph___bool__(self)

    def __len__(self):
        return _bfs_swig.Graph___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _bfs_swig.Graph___getitem__(self, key)

    def __delitem__(self, key):
        return _bfs_swig.Graph___delitem__(self, key)

    def has_key(self, key):
        return _bfs_swig.Graph_has_key(self, key)

    def keys(self):
        return _bfs_swig.Graph_keys(self)

    def values(self):
        return _bfs_swig.Graph_values(self)

    def items(self):
        return _bfs_swig.Graph_items(self)

    def __contains__(self, key):
        return _bfs_swig.Graph___contains__(self, key)

    def key_iterator(self):
        return _bfs_swig.Graph_key_iterator(self)

    def value_iterator(self):
        return _bfs_swig.Graph_value_iterator(self)

    def __setitem__(self, *args):
        return _bfs_swig.Graph___setitem__(self, *args)

    def asdict(self):
        return _bfs_swig.Graph_asdict(self)

    def __init__(self, *args):
        _bfs_swig.Graph_swiginit(self, _bfs_swig.new_Graph(*args))

    def empty(self):
        return _bfs_swig.Graph_empty(self)

    def size(self):
        return _bfs_swig.Graph_size(self)

    def swap(self, v):
        return _bfs_swig.Graph_swap(self, v)

    def begin(self):
        return _bfs_swig.Graph_begin(self)

    def end(self):
        return _bfs_swig.Graph_end(self)

    def rbegin(self):
        return _bfs_swig.Graph_rbegin(self)

    def rend(self):
        return _bfs_swig.Graph_rend(self)

    def clear(self):
        return _bfs_swig.Graph_clear(self)

    def get_allocator(self):
        return _bfs_swig.Graph_get_allocator(self)

    def count(self, x):
        return _bfs_swig.Graph_count(self, x)

    def erase(self, *args):
        return _bfs_swig.Graph_erase(self, *args)

    def find(self, x):
        return _bfs_swig.Graph_find(self, x)

    def lower_bound(self, x):
        return _bfs_swig.Graph_lower_bound(self, x)

    def upper_bound(self, x):
        return _bfs_swig.Graph_upper_bound(self, x)
    __swig_destroy__ = _bfs_swig.delete_Graph

# Register Graph in _bfs_swig:
_bfs_swig.Graph_swigregister(Graph)

class BFSResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _bfs_swig.BFSResult_swiginit(self, _bfs_swig.new_BFSResult(*args))
    first = property(_bfs_swig.BFSResult_first_get, _bfs_swig.BFSResult_first_set)
    second = property(_bfs_swig.BFSResult_second_get, _bfs_swig.BFSResult_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _bfs_swig.delete_BFSResult

# Register BFSResult in _bfs_swig:
_bfs_swig.BFSResult_swigregister(BFSResult)


def breadth_first_search(graph, start_node):
    return _bfs_swig.breadth_first_search(graph, start_node)

def create_sparse_graph(V, E, directed=False):
    return _bfs_swig.create_sparse_graph(V, E, directed)


